# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xZNwq4_a1Rbxn2dRs-QMsIJYntIc33n8
"""

from scipy import stats
import scipy.io
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import  StandardScaler, MinMaxScaler


def upload_data(path):
  mat = scipy.io.loadmat(path)
  X, y = mat['X'], mat['y']
  y = y.astype(np.int64)
  if 'simulation' not in path:
   y[y == 1] = -1
   y[y == 0] = 1
  if 'simulation' in path:
   y = np.transpose(y)
  y = y * -1
  return X,y

def split_data(split_method, X, y,seed=42):
  mask = np.where(y == 1)[0][:int(len(y[y == 1])*0.80)]
  index = list(np.arange(len(y)))
  anti_mask = list(set(index).difference(set(mask)))
  if split_method == "anomalies":
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=seed)
  if split_method == "nouveautes":
    X_train, X_test, y_train, y_test = X[mask], X[anti_mask], y[mask], y[anti_mask]
  return X_train, X_test, y_train, y_test

def prepro_data(path,type_,seed=42):
  X, y = upload_data(path)
  X_train, X_test, y_train, y_test = split_data(type_,X,y,seed=seed)
  scaler = StandardScaler()
  X_train_scaled = scaler.fit_transform(X_train)
  X_test_scaled  = scaler.transform(X_test)
  return X_train, X_test, y_train, y_test, X_train_scaled, X_test_scaled


def simul_gaussian_data(nb_var,nb_outlier, nb_inlier=1000, std_outlier_gauss=0.1):
    """Return both 
    - normal data simulated following a gaussian of integer mean randomly drawn between 0 and 9
    - anomaly data simulated following a different gaussian distribution"""
    np.random.seed(0)
    # mean of norml data
    mean_normal = np.random.randint(0,10,nb_var)
    # standard deviation of 1 for the normal data
    std_normal = np.identity(nb_var)
    normal_data = np.random.multivariate_normal(mean_normal,std_normal,size = nb_inlier)
    
    mean0_min1 = np.copy(mean_normal)
    mean0_min1[0] = mean0_min1[0]-1
    
    mean0_min10 = np.copy(mean_normal)
    mean0_min10[0] = mean0_min10[0]-10
    
    mean0to9_min1 = np.copy(mean_normal)
    mean0to9_min1[0:10] =mean0to9_min1[0:10]-1
    
    list_mean = [mean0_min1,mean0_min10,mean0to9_min1]
    anomaly_list = []
    for i in range(len(list_mean)):
        anomaly_list.append(np.random.multivariate_normal(list_mean[i],np.identity(nb_var)*std_outlier_gauss,size = nb_outlier))
    return normal_data, mean_normal, anomaly_list
    
    
def simul_uniform_data(nb_var,nb_outlier, mean_normal):
    """Only return outlier data simulated uniformly in a [0,10] hyperrectangle"""
    np.random.seed(0)
    uniform_anomaly = np.random.uniform(mean_normal-5,mean_normal+5,size=(nb_outlier,nb_var))
    return uniform_anomaly
    
    








    


